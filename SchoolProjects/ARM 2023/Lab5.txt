@ File:    Lab5.s
@ Author:  Jaden Yu
@ Email: jy0033@uah.edu
@ CS309-01 2023

@  as -o Lab5.o Lab5.s
@  gcc -o Lab5 Lab5.o
@ ./Lab4 ;echo $?
@ gdb --args ./Lab5


.equ READERROR, 0 @Used to check for scanf read error. 

.global main @ Have to use main because of C library uses. 

main:

   ldr r0, =strTitle
   bl printf

**************
initialize_data:
**************
   ldr r0, =strBoardCuts
   ldr r1, =boardsCut
   bl printf
   ldr r0, =strLinerLength
   mov r1, =linLeng
   bl printf
   ldr r0, =strCurrentBoards
   bl printf
   ldr r0, =strBoardOne
   ldr r1, =board1
   bl printf
   ldr r0, =strBoardTwo
   ldr r1, =board2
   bl printf
   ldr r0, =strBoardThree
   ldr r1, =board3
   bl printf
   
   cmp r8, #0
   beq loopB1:
   cmp r8, #1
   beq loopB2:
   cmp r8, #2
   beq loopB3:
   cmp r8, #3
   beq ending:

@*************
prompt:
@*************

@ Prompting the user for a number
   ldr r0, =strInputPrompt @ Put the address of my string into the first parameter
   bl  printf              @ Call the C printf to display input prompt. 

@**************
get_int:
@**************
@ Read in number
   ldr r0, =numInputPattern @ Setup to read in one number.
   ldr r1, =intInput        @ load r1 with the address of where the
                            @ input value will be stored. 
   bl  scanf                @ scan the keyboard.
   cmp r0, #READERROR       @ Check for a read error.
   beq readerror               @ If there was a read error it goes to readerror

   ldr r1, =intInput        @ Have to reload r1 because it gets wiped out. 
   ldr r1, [r1]             @ Read the contents of intInput and store in r1 so that
                            @ it can be printed.
   cmp r1, #6
   blt readerror 
   cmp r1, #144
   bgt readerror   

@***********
loop_startB1:
@***********
   
l  ldr r4, =intInput
   ldr r5, =board1
   mov r7, =boardsCut
   mov r8, #0
   ldr r9, =linLeng
   ldr r6 =waste

@***********
loopB1:
@***********
   
   sub r5, r5, r4
   add r9, r9, r4
   b initialize_data
   cmp r5, r4
   bge loopB1

@***********
loop_startB2:
@***********
   add r6, r6, r5
   ldr r5, =board2
   add r8, #1

@***********
loopB2:
@***********
   
   sub r5, r5, r4
   add r9, r9, r4
   b initialize_data
   cmp r5, r4
   bge loopB2
   
@***********
loop_startB3:
@***********

   add r6, r6, r5
   ldr r5, =board3
   add r8, #1

@***********
loopB3:
@***********
   
   sub r5, r5, r4
   add r9, r9, r4
   b initialize_data
   cmp r5, r4
   bge loopB3

@***********
ending:
@***********

   add r6, r6, r5
   b initialize_data
   ldr r0, =strTermination
   bl printf
   ldr r0, =strWaste
   mov r1, r6
   bl printf

@**********
myexit:
@**********
   mov r7, #0x01 @ SVC call to exit
   svc 0         @ Make the system call.


@**********
readerror:
@**********

   ldr r0, =strInvalidPrompt @gets address for invalid message
   bl printf
   ldr r0, =strInputPattern
   ldr r1, =strInputError   @ Put address into r1 for read.
   bl scanf                 @ scan the keyboard.

   b prompt


.data

@ Declare the strings and data needed

.balign4
strTitle: .asciz "Cut-It-Up Saw \n"

.balign4
strBoardCuts: .asciz "Boards cut so far: %d\n"

.balign4
strLinerLength: .asciz "Liner length of boards cut so far: %d inches\n"

.balign4
strCurrentBoards: .asciz "Current Board Lengths: \n"

.balign4
strBoardOne: .asciz "One:    %d \n"

.balign4
strBoardTwo: .asciz "Two:    %d \n"

.balign4
strBoardThree: .asciz "Three:  %d \n"

.balign 4
strInputPrompt: .asciz "Enter the length of board to cut in inches (at least 6 and no more than 144): \n"

.balign 4
numInputPattern: .asciz "%d"  @ integer format for read. 

.balign 4
strInputPattern: .asciz "%[^\n]" @ Used to clear the input buffer for invalid input. 

.balign 4
strInputError: .skip 100*4  @ User to clear the input buffer for invalid input.

.balign 4
intInput: .word 0   @ Location used to store the user input. 

.balign 4
strInvalidPrompt: .asciz "Invalid Input, try again. \n"

.balign 4
strTermination: .asciz "Inventory levels have dropped below minimum levels and will now terminate. \n"

.balign 4
strWaste: .asciz "Waste is %d inches. \n"

.balign 4
waste: .word 0

.balign 4
board1: .word 144

.balign 4
board2: .word 144

.balign 4
board3: .word 144

.balign 4
boardsCut: .word 0

.balign4
linLeng: .word 0